---
title: "Data collection"
subtitle: "`data_collect` subproject."
html:
    code-fold: true
    number-sections: true
---

This subproject simply downloads data from URL sources defined in `.Renviron` file. Although the URLs may rot, the principle of downloading differs from obtaining data programatically in [Chapter 3](data_api.qmd). As long as updated URLs can be reconfigured in `.Renviron`, this code should reproduce. However, if the format or structure of the downloaded files changes, this can lead to problems in [Chapter 5](../processing_scripts/data_process.qmd).


## Setup

### Targets environment for subproject

```{r}
#| label: set_project
Sys.setenv(TAR_PROJECT = "data_collect")
```

### Targets script setup

```{r}
#| label: setup
library(targets)
tar_unscript()
knitr::opts_chunk$set(tar_script = "_data_collect.R", collapse = TRUE, comment = "#>")
```


### Targets globals

We first define some global options/functions common to all targets.

```{r}
#| engine: targets
#| label: globals
#| tar_globals: true

# read custom functions
lapply(list.files(here::here("R"), full.names = TRUE), source)
tar_option_set(packages = packages())
# obtain configuration from .Renviron
url_csf <- Sys.getenv("URL_CSF")
url_anr_2010 <- Sys.getenv("URL_ANR_2010")
url_anr_2010_p <- Sys.getenv("URL_ANR_2010_P")
url_anr_2009 <- Sys.getenv("URL_ANR_2009")
url_anr_2009_p <- Sys.getenv("URL_ANR_2009_P")
url_eu_europe  <- Sys.getenv("URL_EU_EUROPE")
url_eu_2020 <- Sys.getenv("URL_EU_2020")
url_eu_fp7 <- Sys.getenv("URL_EU_FP7")
url_snsf <- Sys.getenv("URL_SNSF")
```

## Targets

### Czech Science Foundation

```{r}
#| engine: targets
#| label: csf
list(
   tarchetypes::tar_download(
    name = csf_download_files,
    urls = url_csf,
    paths = here::here("data", "collected_data", "csf.tsv")
  )
)
```

### Agence nationale de la recherche

```{r}
#| engine: targets
#| label: anr
list(
  tarchetypes::tar_download(
    name = anr_download_files,
    urls = c(url_anr_2010, url_anr_2009, url_anr_2010_p, url_anr_2009_p),
    paths = paste0(
        here::here("data", "collected_data"), 
        .Platform$file.sep, 
        c("anr_2010", "anr_2009", "anr_2010_p", "anr_2009_p"), 
        ".csv")
  ),
  tar_target(
    name = anr_data_raw_2010,
    command = readr::read_delim(anr_download_files[1],
                                 delim = ";",
                                 locale = locale("fr",
                                                 decimal_mark = "."),
                                                 show_col_types = FALSE) |> 
                                                 janitor::clean_names()|> 
                                                 dplyr::mutate(source = "since2010"),
    format = "qs"
  ),
  tar_target(
    name = anr_data_raw_2009,
    command = readr::read_delim(anr_download_files[2],
                                 delim = ";",
                                 locale = locale("fr",
                                                 decimal_mark = "."),
                                show_col_types = FALSE) |> 
                                                 janitor::clean_names() |> 
                                                 dplyr::mutate(source = "before2009"),
    format = "qs"
  ),
  tar_target(
    name = anr_data_raw,
    command = dplyr::bind_rows(
        anr_data_raw_2010,
        anr_data_raw_2009
    ),
    format = "qs"
  )
)
```

### CORDIS

```{r}
#| engine: targets
#| label: cordis
list(
  tarchetypes::tar_download(
    name = eu_download_files_zip,
    urls = c(url_eu_europe, url_eu_2020, url_eu_fp7),
    paths = paste0(
        here::here("data", "collected_data"), 
    .Platform$file.sep, 
        c("eu_europe", "eu_horizon", "eu_fp7"), 
        ".zip"),
    method = "curl",
    mode = "wb"
  ),
  tar_target(
    name = eu_download_files,
    command = unzip_eu_files(eu_download_files_zip, data_path = here::here("data", "collected_data")),
    format = "file" 
  ),
tar_target(
    name = eu_data_raw,
    command = purrr::map_df(eu_download_files, read.csv2) |> 
              dplyr::as_tibble(),
    format = "qs" 
  )
)
```

### Swiss National Science Foundation

```{r}
#| engine: targets
#| label: snsf
list(
  tarchetypes::tar_download(
    name = snsf_download_files,
    urls = c(url_snsf),
    paths = paste0(
        here::here("data", "collected_data"), 
        .Platform$file.sep, 
        c("snsf"), 
        ".csv"),
    method = "curl",
    mode = "w"
  ),
tar_target(
    name = snsf_data_raw,
    command = read.csv2(snsf_download_files)|> 
              dplyr::as_tibble(),
    format = "qs" 
  )
)
```


### DFG - Gepris

Gepris information page (`https://gepris.dfg.de/gepris/OCTOPUS?task=showMonitor`) at scrape time:


Data Monitor
Last update: 26.01.2024

Most recent date of approval: 26.11.2023
All projects decided upon and approved between 1.1.1999 and the specified award letter date can be found in GEPRIS.

Entries by Type	Count
Projects with final reports	40901
Projects	142517
Persons	93668
Institutions	43769
Entries by Research Area	Count
Humanities and Social Sciences Colour index for Humanities and Social Sciences	26304
Life Sciences Colour index for Life Sciences	49480
Natural Sciences Colour index for Natural Sciences	38446
Engineering Sciences Colour index for Engineering Sciences	26304
Infrastructure	317


```{r}
#| engine: targets
#| label: dfg
list(
  tar_target(
    name = dfg_catalogue_tsv,
    command = scrape_dfg_catalogue(
      gepris_url = "https://gepris.dfg.de/gepris/OCTOPUS?beginOfFunding=&bewilligungsStatus=&bundesland=DEU%23&context=projekt&einrichtungsart=-1&fachgebiet=%23&findButton=historyCall&gefoerdertIn=&ggsHunderter=0&hitsPerPage=50&index=1&nurProjekteMitAB=false&oldGgsHunderter=0&oldfachgebiet=%23&pemu=24&peu=%23&task=doKatalog&teilprojekte=true&zk_transferprojekt=false",
      outfile = here::here("data", "collected_data", "dfg_catalogue.tsv"), 
      sleep_time = 5,
      run = as.logical(Sys.getenv("API_RUN")) #as.logical(Sys.getenv("API_RUN"))
      ),
    format = "file"
  ),
tar_target(
    name = dfg_projects_tsv,
    command = scrape_dfg_projects(
      gepris_catalogue = dfg_catalogue_tsv,
      outfile = here::here("data", "collected_data", "dfg_projects.tsv"), 
      sleep_time = 5,
      run = as.logical(Sys.getenv("API_RUN")) #
      ),
    format = "file"
  )
)
```

## Reset project
```{r}
#| label: unset_project
Sys.setenv(TAR_PROJECT = "main")
```