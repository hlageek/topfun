---
title: "Targets"
subtitle: "Deafult project."
html:
    code-fold: true
    number-sections: true
---


## Setup

### Targets script setup

### Targets environment for subproject

```{r}
#| label: set_project
#| include: false
#| eval: false
Sys.setenv(TAR_PROJECT = "main")
```

```{r}
#| label: setup
#| include: false
library(targets)
tar_unscript(script = "_targets.R")
knitr::opts_chunk$set(tar_script = "_targets.R", collapse = TRUE, comment = "#>")
```


### Targets globals

We first define some global options/functions common to all targets.

```{r}
#| engine: targets
#| label: globals
#| tar_globals: true

# read custom functions
lapply(list.files(here::here("R"), full.names = TRUE), source)
tar_option_set(packages = packages())
# define function for running sub-pipelines and track their dependencies
run_subpipeline <- function(script, store, depend_on){
        targets::tar_make(
        script = script,
        store = store
        )
        c("Last compiled" = Sys.time())
}
```

## Code

```{r}
#| engine: targets
#| label: code
list(
 tarchetypes::tar_render(
    name = script_data_import,
    path = here::here("scripts", "analysis_scripts", "data_import.qmd"),
 ),
 tar_target(
    name = compile_data_import,
    command = run_subpipeline(
         script = here::here("scripts", "analysis_scripts", "_data_import.R"), 
         store = "_store/_data_import", 
         depend_on = script_data_import
         )
 ),
 tarchetypes::tar_render(
    name = script_data_analyze,
    path = here::here("scripts", "analysis_scripts", "data_analyze.qmd"),
 ),
 tar_target(
    name = compile_data_analyze,
    command = run_subpipeline(
        script = here::here("scripts", "analysis_scripts", "_data_analyze.R"), 
         store = "_store/_data_analyze", 
         depend_on = script_data_analyze
         )
 )
)
```
